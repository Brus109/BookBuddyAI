// src/components/HomePage.tsx - CORREGIDO
import { useState, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { BookList } from './BookList';
import { SearchBar } from './SearchBar';
import { BookFilters } from './BookFilters';
import type { Book } from '../types';

export function HomePage() {
  const navigate = useNavigate();
  const [searchResults, setSearchResults] = useState<Book[]>([]);
  const [filteredBooks, setFilteredBooks] = useState<Book[]>([]);
  const [hasSearch, setHasSearch] = useState(false); // ‚úÖ Nuevo estado para controlar b√∫squeda

  const navigateTo = useCallback((path: string) => {
    try {
      navigate(path);
    } catch (error) {
      window.location.href = path;
    }
  }, [navigate]);

  const handleSearchResults = useCallback((results: Book[]) => {
    console.log('üîç Resultados de b√∫squeda:', results.length);
    setSearchResults(results);
    setFilteredBooks(results);
    setHasSearch(results.length > 0); // ‚úÖ Mostrar filtros solo si NO hay b√∫squeda
  }, []);

  const handleFilterChange = useCallback((filtered: Book[]) => {
    console.log('üéØ Libros filtrados:', filtered.length);
    setFilteredBooks(filtered);
  }, []);

  const goToFavorites = (e: React.MouseEvent) => {
    e.preventDefault();
    navigateTo('/favorites');
  };

  // ‚úÖ Determinar qu√© libros mostrar
  const booksToShow = hasSearch ? filteredBooks : (filteredBooks.length > 0 ? filteredBooks : undefined);

  return (
    <div>
      <header className="app-header">
        <div className="header-content">
          <h1>BookBuddyAI üìö</h1>
          <p>Descubre tu pr√≥ximo libro favorito con inteligencia artificial</p>
        </div>
        
        <nav className="header-nav">
          <button className="nav-btn" onClick={goToFavorites}>
            ‚ù§Ô∏è Favoritos
          </button>
        </nav>
      </header>

      <SearchBar onSearchResults={handleSearchResults} />
      
      {/* ‚úÖ MOSTRAR FILTROS SOLO CUANDO NO HAY B√öSQUEDA */}
      {!hasSearch && (
        <BookFilters 
          books={[]} // ‚úÖ Pasar array vac√≠o o los libros iniciales si los tienes
          onFilterChange={handleFilterChange} 
        />
      )}
      
      {/* ‚úÖ MOSTRAR MENSAJE CUANDO HAY B√öSQUEDA PERO NO RESULTADOS */}
      {hasSearch && searchResults.length === 0 && (
        <div className="search-no-results">
          <p>üîç No se encontraron libros para tu b√∫squeda</p>
          <button 
            onClick={() => {
              setSearchResults([]);
              setFilteredBooks([]);
              setHasSearch(false);
            }}
            className="clear-search-btn"
          >
            üìö Ver todos los libros
          </button>
        </div>
      )}
      
      <BookList books={booksToShow} />
    </div>
  );
}